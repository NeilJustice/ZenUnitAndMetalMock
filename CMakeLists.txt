cmake_minimum_required(VERSION 3.2)
project(ZenUnitAndMetalMock)
include(${CMAKE_SOURCE_DIR}/CMakeMacros.cmake)

if(${CMAKE_SIZEOF_VOID_P} STREQUAL "4")
   message("Notice: ZenUnit and MetalMock are not supported on 32-bit Windows")
endif()

if(UNIX)
   set(CMAKE_CXX_FLAGS "-std=c++2a -Wall -Wextra -pedantic -Werror -pthread -Wno-gnu-zero-variadic-macro-arguments -Wno-unused-variable")
   if(FastLinuxDebugBuildMode)
      replace(CMAKE_CXX_FLAGS_DEBUG "-g" "")
      message("FastLinuxDebugBuildMode enabled: -g removed")
   elseif(FastLinuxReleaseBuildMode)
      replace(CMAKE_CXX_FLAGS_RELEASE "-O3" "")
      message("FastLinuxReleaseBuildMode eneabled: -O3 removed")
   endif()
   if(ClangTidyMode)
      set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
      message("ClangTidyMode enabled: CMAKE_EXPORT_COMPILE_COMMANDS set to ON")
   elseif(ClangUndefinedBehaviorSanitizerMode)
      append(CMAKE_CXX_FLAGS "-fsanitize=undefined")
      message("ClangUndefinedBehaviorSanitizerMode enabled: -fsanitize=undefined appended to CMAKE_CXX_FLAGS")
   elseif(ClangAddressSanitizerMode)
      append(CMAKE_CXX_FLAGS "-fsanitize=address")
      message("ClangAddressSanitizerMode enabled: -fsanitize=address appended to CMAKE_CXX_FLAGS")
   elseif(ClangThreadSanitizerMode)
      append(CMAKE_CXX_FLAGS "-fsanitize=thread")
      message("ClangThreadSanitizerMode enabled: -fsanitize=thread appended to CMAKE_CXX_FLAGS")
   elseif(ClangCodeCoverageMode)
      append(CMAKE_CXX_FLAGS "-fcoverage-mapping -fprofile-instr-generate=coverage.profraw")
      message("ClangCodeCoverageMode enabled: -fcoverage-mapping -fprofile-instr-generate=coverage.profraw appended to CMAKE_CXX_FLAGS")
   elseif(LCovCodeCoverageMode)
      add_library(CodeCovLibraryInterface INTERFACE)
      target_compile_options(CodeCovLibraryInterface INTERFACE -O0 -g --coverage)
      target_link_libraries(CodeCovLibraryInterface INTERFACE --coverage)
   endif()
elseif(MSVC)
   set(CMAKE_CXX_FLAGS "/std:c++latest /EHsc /Wall /WX /permissive- /sdl /Zc:rvalueCast /MP /Zm500")
   replace(CMAKE_EXE_LINKER_FLAGS_DEBUG "/debug" "/DEBUG:FASTLINK")
   replace(CMAKE_EXE_LINKER_FLAGS_RELEASE "/INCREMENTAL:NO" "/INCREMENTAL")
   replace(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "/debug" "/DEBUG:FASTLINK")
   if(FastWindowsDebugBuildMode)
      replace(CMAKE_EXE_LINKER_FLAGS_DEBUG "/DEBUG:FASTLINK" "")
      message("FastWindowsDebugBuildMode enabled: /DEBUG:FASTLINK replaced with empty string in CMAKE_EXE_LINKER_FLAGS_DEBUG")
   elseif(FastWindowsReleaseBuildMode)
      replace(CMAKE_CXX_FLAGS_RELEASE "/O2" "/Od")
      replace(CMAKE_CXX_FLAGS_RELEASE "/Ob2" "/Ob0")
      message("FastWindowsReleaseBuildMode enabled: /O2 replaced with /Od and /Ob2 replaced with /Ob0 to minimize Release build times")
   endif()
   set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

add_subdirectory(ZenUnitAndMetalMock)
add_subdirectory(ZenUnitCompileSpeedTests)
add_subdirectory(ZenUnitExamples)
add_subdirectory(ZenUnitLibraryTests)
add_subdirectory(ZenUnitTestUtils)
add_subdirectory(ZenUnitUtilsAndAssertionTests)
add_subdirectory(MetalMockExamples)
add_subdirectory(MetalMockTests)

set(CMAKE_CONFIGURATION_TYPES "Debug;Release;RelWithDebInfo")

# Allows for ZenUnit.h and MetalMock.h to be installed instantly without first having to build all the test projects
set(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY ON)

if(UNIX AND NOT APPLE)
   include(ProcessorCount)
   ProcessorCount(numberOfThreads)
   add_custom_target(clang-tidy COMMAND
      find -name "*.cpp" -print0 | xargs -0 -n 1 -P ${numberOfThreads} -t clang-tidy -header-filter=.* -p ${CMAKE_BUILD_TYPE}
      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} VERBATIM USES_TERMINAL)
endif()
