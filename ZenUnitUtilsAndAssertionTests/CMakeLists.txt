cmake_minimum_required(VERSION 3.2)
project(ZenUnitUtilsAndAssertionTests)
include(${CMAKE_SOURCE_DIR}/CMakeMacros.cmake)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
include_directories(${CMAKE_SOURCE_DIR})
include_directories(${ZenUnitIncludeDirectory})

folder_source_group(Assertions)
folder_source_group_subfolder(Components FunctionCallers)
folder_source_group_subsubfolder(Components FunctionCallers MetalMock)
folder_source_group_subfolder(Components MetalMock)
folder_source_group_subfolder(Components Concurrency)
folder_source_group_subsubfolder(Components Concurrency MetalMock)
folder_source_group_subfolder(Components Iteration)
folder_source_group_subsubfolder(Components Iteration MetalMock)
folder_source_group_subfolder(Components Time)
folder_source_group_subsubfolder(Components Time MetalMock)
folder_source_group(Equalizers)
folder_source_group(Testing)
folder_source_group(StaticComponents)
folder_source_group(ValueTypes)

source_group("" FILES ZenUnitUtilsAndAssertionTestsMain.cpp pch.h pch.cpp)
file(GLOB_RECURSE sourceFilePaths *.h *.cpp)

add_executable(ZenUnitUtilsAndAssertionTests ${sourceFilePaths})
target_link_libraries(ZenUnitUtilsAndAssertionTests ZenUnitTestUtils)

if(UNIX AND NOT APPLE)
   target_link_libraries(ZenUnitUtilsAndAssertionTests stdc++fs)
endif()

if(EXISTS ${GoogleBenchmarkLibraryPath})
   target_link_libraries(ZenUnitUtilsAndAssertionTests ${GoogleBenchmarkLibraryPath})
endif()
if(WIN32)
   target_link_libraries(ZenUnitUtilsAndAssertionTests shlwapi)
endif()

IfMSVCEnablePrecompiledHeaders()
IfMSVCAddPostBuildStepToRunTestsRandomly()

if(UNIX AND NOT APPLE)
   if(LCovCodeCoverageMode)
     target_link_libraries(ZenUnitUtilsAndAssertionTests CodeCovLibraryInterface)
   endif()
endif()
